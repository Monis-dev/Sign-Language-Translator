let video; // access the cam

let bodyPose; //holds the body pose;

let handPose;

let connections; //to connects the dots

let poses = []; //storing the results data

let hands = []; 

function preload(){
  bodyPose = ml5.bodyPose("MoveNet" ,{flipped: true}) // loads the body pose form the server
  handPose = ml5.handPose({flipped: true});
}

function gotPoses(results){
  poses = results;  
}

function gotHands(results){
  hands = results;  
}

function mousePressed(){
  console.log(hands)
}

function setup(){
  createCanvas(650, 480); 
  video = createCapture(VIDEO, {flipped: true});
  video.size(650, 480);
  video.hide();
  
  handPose.detectStart(video, gotHands);
  bodyPose.detectStart(video, gotPoses); //detect the live image from the cam contineously 
  // two variables video to get data and gotPose to get back the results
  connections = bodyPose.getSkeleton();
  
}


function draw(){
  image(video, 0, 0);

//   if(poses.length > 0){
//     let pose = poses[0]; //drawing circle on nose with has an index of 0
//     for(let i = 0; i < pose.keypoints.length; i++){  
//       let keypoints = pose.keypoints[i];
//       fill(0, 255, 0);
//       noStroke();
//       if(keypoints.confidence > 0.1){  
//         circle(keypoints.x, keypoints.y, 10); 
//         for(let j = 0; j < connections.length; j++){
//           let connection = connections[j];
//           let a = connection[0];
//           let b = connection[1];
//           let keyPointA = pose.keypoints[a];
//           let keyPointB = pose.keypoints[b];
//           if(keyPointA.confidence > 0.1 && keyPointB.confidence > 0.1){
//           stroke(0, 0, 255);
//           strokeWeight(5);
//           line(keyPointA.x, keyPointA.y, keyPointB.x, keyPointB.y)
//         }
//         }
        
//       }
//     }
    //hands
//   for(let i = 0; i < hands.length; i++){
//     let hand = hands[i];
//     for(let i = 0; i < hand.keypoints.length; i++){
//         let keypoint = hand.keypoints[i];
//         fill(255,0,255);
//         noStroke();
//         circle(keypoint.x, keypoint.y, 10);
//     }

//   }
    if (hands.length > 0) {
  let hand = hands[0];
  let index = hand.index_finger_tip;
  let thumb = hand.thumb_mcp;
  let middle = hand.middle_finger_tip;
  let wrist = hand.wrist;

  // Normalize distances
//   let handSize = dist(wrist.x, wrist.y, thumb.x, thumb.y);  // Reference distance
//   let d = dist(index.x, index.y, thumb.x, thumb.y, middle.x, middle.y ) / handSize;

//   console.log(d);  // This is now a normalized value
  

     // detectHandSign(d); 
  let angle = calculateAngle(
  thumb.x, thumb.y,
  index.x, index.y,
  middle.x, middle.y
);
      fill(255, 0, 0);
      console.log("Angle (thumb-index-middle):", angle);
      detectHandPose(angle);
  // Draw circles
  circle(index.x, index.y, 10);
  circle(thumb.x, thumb.y, 10);
  circle(middle.x, middle.y, 10);
}

  //Make size of a circle bigger with hands distance
    // let rx = pose.right_wrist.x;
    // let ry = pose.right_wrist.y;

    // let lx = pose.left_wrist.x;
    // let ly = pose.left_wrist.y;

    //  fill(0,0,255);
    // circle(rx,ry,10);
    
    
    //  fill(0,255, 0);
    // circle(lx,ly,10);
    
    // let d = dist(rx,ry,lx,ly);
    
    // fill(255, 0, 0);
    // circle(x, y, d); //change of size of nose depending on the distance between the two writ pts.

  //}
  
}

// function detectHandSign(d){
//   if (d > 0.35 && d < 0.45) {  // Adjust normalized thresholds as needed
//     fill(255, 255, 255);
//     console.log("A");
//   }   
//   if (d > 1.81 && d < 1.93) {  // Adjust normalized thresholds as needed
//     fill(0, 255, 255);
//     console.log("B");
//   }

// }

function calculateAngle(x1, y1, x2, y2, x3, y3) {
  let v1 = { x: x2 - x1, y: y2 - y1 }; // Vector 1 (from joint 1 to joint 2)
  let v2 = { x: x3 - x2, y: y3 - y2 }; // Vector 2 (from joint 2 to joint 3)

  let dotProduct = v1.x * v2.x + v1.y * v2.y; // Dot product
  let magV1 = Math.sqrt(v1.x ** 2 + v1.y ** 2); // Magnitude of vector 1
  let magV2 = Math.sqrt(v2.x ** 2 + v2.y ** 2); // Magnitude of vector 2

  let angle = Math.acos(dotProduct / (magV1 * magV2)); // Angle in radians
  return angle * (180 / Math.PI); // Convert to degrees
}

//Calculate angle between thumb, index finger, and middle finger
function detectHandPose(a){
  if(a > 20 && a < 30){
    console.log("A");
  } else if(a > 49 && a < 54){
    console.log("B");
  } else if( a > 158 && a < 163){
    console.log("D");
  } else if( a > 1.3 && a < 8.9){
    console.log("F");
  }
  
  
}
